// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Snitz.PostThanks.Models;

#nullable disable

namespace Snitz.PostThanks.Migrations
{
    [DbContext(typeof(PostThanksContext))]
    [Migration("20250823171855_postthanks")]
    partial class newmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.13");

            modelBuilder.Entity("Snitz.PostThanks.Models.PostThanksEntry", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MEMBER_ID");

                    b.Property<int>("TopicId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TOPIC_ID");

                    b.Property<int>("ReplyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("REPLY_ID");

                    b.HasKey("MemberId", "TopicId", "ReplyId");

                    b.ToTable("FORUM_THANKS");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.ArchivedPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TOPIC_ID");

                    b.Property<int>("AllowRating")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_ALLOW_RATING");

                    b.Property<int?>("ArchiveFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_ARCHIVE_FLAG");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAT_ID");

                    b.Property<string>("Created")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("TEXT")
                        .HasColumnName("T_DATE");

                    b.Property<int>("ForumId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FORUM_ID");

                    b.Property<string>("Ip")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("T_IP");

                    b.Property<short>("IsSticky")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_STICKY");

                    b.Property<short>("Ispoll")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_ISPOLL");

                    b.Property<string>("LastEdit")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT")
                        .HasColumnName("T_LAST_EDIT");

                    b.Property<int?>("LastEditby")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_LAST_EDITBY");

                    b.Property<int?>("LastPostAuthorId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_LAST_POST_AUTHOR");

                    b.Property<string>("LastPostDate")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT")
                        .HasColumnName("T_LAST_POST");

                    b.Property<int?>("LastPostReplyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_LAST_POST_REPLY_ID");

                    b.Property<short>("Mail")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_MAIL");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_AUTHOR");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("T_MESSAGE");

                    b.Property<short>("Pollstatus")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_POLLSTATUS");

                    b.Property<int>("RatingTotal")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_RATING_TOTAL");

                    b.Property<int>("RatingTotalCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_RATING_TOTAL_COUNT");

                    b.Property<int>("ReplyCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_REPLIES");

                    b.Property<short>("Sig")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_SIG");

                    b.Property<short>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_STATUS");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("T_SUBJECT");

                    b.Property<int>("UnmoderatedReplies")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_UREPLIES");

                    b.Property<int>("ViewCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_VIEW_COUNT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ForumId");

                    b.HasIndex("LastPostAuthorId");

                    b.HasIndex("MemberId");

                    b.ToTable("FORUM_A_TOPICS");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.ArchivedReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("REPLY_ID");

                    b.Property<int>("ArchivedPostId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TOPIC_ID");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAT_ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("R_MESSAGE");

                    b.Property<string>("Created")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("TEXT")
                        .HasColumnName("R_DATE");

                    b.Property<int>("ForumId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FORUM_ID");

                    b.Property<string>("Ip")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("R_IP");

                    b.Property<int?>("LastEditby")
                        .HasColumnType("INTEGER")
                        .HasColumnName("R_LAST_EDITBY");

                    b.Property<string>("LastEdited")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT")
                        .HasColumnName("R_LAST_EDIT");

                    b.Property<short>("Mail")
                        .HasColumnType("INTEGER")
                        .HasColumnName("R_MAIL");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("R_AUTHOR");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER")
                        .HasColumnName("R_RATING");

                    b.Property<short>("Sig")
                        .HasColumnType("INTEGER")
                        .HasColumnName("R_SIG");

                    b.Property<short>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("R_STATUS");

                    b.HasKey("Id");

                    b.HasIndex("ArchivedPostId");

                    b.HasIndex("MemberId");

                    b.ToTable("FORUM_A_REPLY");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAT_ID");

                    b.Property<int?>("Moderation")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAT_MODERATION");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("CAT_NAME");

                    b.Property<int>("Sort")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAT_ORDER");

                    b.Property<short?>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAT_STATUS");

                    b.Property<int?>("Subscription")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAT_SUBSCRIPTION");

                    b.HasKey("Id");

                    b.ToTable("FORUM_CATEGORY");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.Forum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("FORUM_ID");

                    b.Property<int>("ArchiveSched")
                        .HasColumnType("INTEGER")
                        .HasColumnName("F_ARCHIVE_SCHED");

                    b.Property<int?>("ArchivedCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("F_A_COUNT");

                    b.Property<int>("ArchivedTopics")
                        .HasColumnType("INTEGER")
                        .HasColumnName("F_A_TOPICS");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAT_ID");

                    b.Property<short>("CountMemberPosts")
                        .HasColumnType("INTEGER")
                        .HasColumnName("F_COUNT_M_POSTS");

                    b.Property<int>("Defaultdays")
                        .HasColumnType("INTEGER")
                        .HasColumnName("F_DEFAULTDAYS");

                    b.Property<int>("DeleteSched")
                        .HasColumnType("INTEGER")
                        .HasColumnName("F_DELETE_SCHED");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("F_DESCRIPTION");

                    b.Property<string>("Ip")
                        .HasColumnType("TEXT")
                        .HasColumnName("F_IP");

                    b.Property<string>("LastArchived")
                        .HasColumnType("TEXT")
                        .HasColumnName("F_L_ARCHIVE");

                    b.Property<string>("LastDelete")
                        .HasColumnType("TEXT")
                        .HasColumnName("F_L_DELETE");

                    b.Property<string>("LastPost")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT")
                        .HasColumnName("F_LAST_POST");

                    b.Property<int?>("LastPostAuthorId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("F_LAST_POST_AUTHOR");

                    b.Property<int?>("LatestReplyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("F_LAST_POST_REPLY_ID");

                    b.Property<int?>("LatestTopicId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("F_LAST_POST_TOPIC_ID");

                    b.Property<short>("Mail")
                        .HasColumnType("INTEGER")
                        .HasColumnName("F_MAIL");

                    b.Property<int>("Moderation")
                        .HasColumnType("INTEGER")
                        .HasColumnName("F_MODERATION");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER")
                        .HasColumnName("F_ORDER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT")
                        .HasColumnName("F_PASSWORD_NEW");

                    b.Property<int>("Polls")
                        .HasColumnType("INTEGER")
                        .HasColumnName("F_POLLS");

                    b.Property<int>("Postauth")
                        .HasColumnType("INTEGER")
                        .HasColumnName("F_POSTAUTH");

                    b.Property<int>("Privateforums")
                        .HasColumnType("INTEGER")
                        .HasColumnName("F_PRIVATEFORUMS");

                    b.Property<short>("Rating")
                        .HasColumnType("INTEGER")
                        .HasColumnName("F_RATING");

                    b.Property<int>("ReplyCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("F_COUNT");

                    b.Property<int>("Replyauth")
                        .HasColumnType("INTEGER")
                        .HasColumnName("F_REPLYAUTH");

                    b.Property<short>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("F_STATUS");

                    b.Property<int>("Subscription")
                        .HasColumnType("INTEGER")
                        .HasColumnName("F_SUBSCRIPTION");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("F_SUBJECT");

                    b.Property<int>("TopicCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("F_TOPICS");

                    b.Property<short>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("F_TYPE");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("F_URL");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LastPostAuthorId");

                    b.ToTable("FORUM_FORUM");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.ForumModerator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("MOD_ID");

                    b.Property<int>("ForumId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FORUM_ID");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MEMBER_ID");

                    b.Property<short?>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MOD_TYPE");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.HasIndex("MemberId");

                    b.ToTable("FORUM_MODERATOR");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("MEMBER_ID");

                    b.Property<string>("Age")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_AGE");

                    b.Property<string>("Aim")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_AIM");

                    b.Property<short>("Allowemail")
                        .HasColumnType("INTEGER")
                        .HasColumnName("M_ALLOWEMAIL");

                    b.Property<string>("Bio")
                        .HasColumnType("TEXT")
                        .HasColumnName("M_BIO");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_CITY");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_COUNTRY");

                    b.Property<string>("Created")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_DATE");

                    b.Property<int>("DefaultView")
                        .HasColumnType("INTEGER")
                        .HasColumnName("M_DEFAULT_VIEW");

                    b.Property<string>("Dob")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_EMAIL");

                    b.Property<string>("Firstname")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_FIRSTNAME");

                    b.Property<short>("HideEmail")
                        .HasColumnType("INTEGER")
                        .HasColumnName("M_HIDE_EMAIL");

                    b.Property<string>("Hobbies")
                        .HasColumnType("TEXT")
                        .HasColumnName("M_HOBBIES");

                    b.Property<string>("Homepage")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_HOMEPAGE");

                    b.Property<string>("Icq")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_ICQ");

                    b.Property<string>("Ip")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_IP");

                    b.Property<string>("Key")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_KEY");

                    b.Property<string>("LastIp")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_LAST_IP");

                    b.Property<string>("LastLogin")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_LASTHEREDATE");

                    b.Property<string>("Lastactivity")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_LASTACTIVITY");

                    b.Property<string>("Lastname")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_LASTNAME");

                    b.Property<string>("Lastpostdate")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_LASTPOSTDATE");

                    b.Property<short>("Level")
                        .HasColumnType("INTEGER")
                        .HasColumnName("M_LEVEL");

                    b.Property<string>("Link1")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_LINK1");

                    b.Property<string>("Link2")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_LINK2");

                    b.Property<string>("Lnews")
                        .HasColumnType("TEXT")
                        .HasColumnName("M_LNEWS");

                    b.Property<string>("Marstatus")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_MARSTATUS");

                    b.Property<string>("Msn")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_MSN");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_NAME");

                    b.Property<string>("Newemail")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_NEWEMAIL");

                    b.Property<string>("Occupation")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_OCCUPATION");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_PHOTO_URL");

                    b.Property<int>("Pmemail")
                        .HasColumnType("INTEGER")
                        .HasColumnName("M_PMEMAIL");

                    b.Property<int>("Pmreceive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("M_PMRECEIVE");

                    b.Property<short>("Pmsavesent")
                        .HasColumnType("INTEGER")
                        .HasColumnName("M_PMSAVESENT");

                    b.Property<int>("Posts")
                        .HasColumnType("INTEGER")
                        .HasColumnName("M_POSTS");

                    b.Property<short>("Privateprofile")
                        .HasColumnType("INTEGER")
                        .HasColumnName("M_PRIVATEPROFILE");

                    b.Property<string>("Pwkey")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_PWKEY");

                    b.Property<string>("Quote")
                        .HasColumnType("TEXT")
                        .HasColumnName("M_QUOTE");

                    b.Property<short>("ReceiveEmail")
                        .HasColumnType("INTEGER")
                        .HasColumnName("M_RECEIVE_EMAIL");

                    b.Property<string>("Sex")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_SEX");

                    b.Property<short?>("Sha256")
                        .HasColumnType("INTEGER")
                        .HasColumnName("M_SHA256");

                    b.Property<short>("SigDefault")
                        .HasColumnType("INTEGER")
                        .HasColumnName("M_SIG_DEFAULT");

                    b.Property<string>("Signature")
                        .HasColumnType("TEXT")
                        .HasColumnName("M_SIG");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_STATE");

                    b.Property<short>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("M_STATUS");

                    b.Property<short>("Subscription")
                        .HasColumnType("INTEGER")
                        .HasColumnName("M_SUBSCRIPTION");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_TITLE");

                    b.Property<short>("ViewSig")
                        .HasColumnType("INTEGER")
                        .HasColumnName("M_VIEW_SIG");

                    b.Property<string>("Yahoo")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT")
                        .HasColumnName("M_YAHOO");

                    b.HasKey("Id");

                    b.ToTable("FORUM_MEMBERS");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.MemberSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("SUBSCRIPTION_ID");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAT_ID");

                    b.Property<int>("ForumId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FORUM_ID");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MEMBER_ID");

                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TOPIC_ID");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ForumId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PostId");

                    b.ToTable("FORUM_SUBSCRIPTIONS");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TOPIC_ID");

                    b.Property<int>("AllowRating")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_ALLOW_RATING");

                    b.Property<bool>("Answered")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_ANSWERED");

                    b.Property<int?>("ArchiveFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_ARCHIVE_FLAG");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAT_ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("T_MESSAGE");

                    b.Property<string>("Created")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("TEXT")
                        .HasColumnName("T_DATE");

                    b.Property<int>("ForumId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FORUM_ID");

                    b.Property<string>("Ip")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("T_IP");

                    b.Property<short>("IsSticky")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_STICKY");

                    b.Property<short>("Ispoll")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_ISPOLL");

                    b.Property<string>("LastEdit")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT")
                        .HasColumnName("T_LAST_EDIT");

                    b.Property<int?>("LastEditby")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_LAST_EDITBY");

                    b.Property<int?>("LastPostAuthorId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_LAST_POST_AUTHOR");

                    b.Property<string>("LastPostDate")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT")
                        .HasColumnName("T_LAST_POST");

                    b.Property<int?>("LastPostReplyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_LAST_POST_REPLY_ID");

                    b.Property<short>("Mail")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_MAIL");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_AUTHOR");

                    b.Property<short>("Pollstatus")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_POLLSTATUS");

                    b.Property<int>("RatingTotal")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_RATING_TOTAL");

                    b.Property<int>("RatingTotalCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_RATING_TOTAL_COUNT");

                    b.Property<int>("ReplyCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_REPLIES");

                    b.Property<short>("Sig")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_SIG");

                    b.Property<short>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_STATUS");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("T_SUBJECT");

                    b.Property<int>("UnmoderatedReplies")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_UREPLIES");

                    b.Property<int>("ViewCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("T_VIEW_COUNT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ForumId");

                    b.HasIndex("LastPostAuthorId");

                    b.HasIndex("MemberId");

                    b.ToTable("FORUM_TOPICS");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.PostReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("REPLY_ID");

                    b.Property<bool>("Answer")
                        .HasColumnType("INTEGER")
                        .HasColumnName("R_ANSWER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CAT_ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("R_MESSAGE");

                    b.Property<string>("Created")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("TEXT")
                        .HasColumnName("R_DATE");

                    b.Property<int>("ForumId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FORUM_ID");

                    b.Property<string>("Ip")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("R_IP");

                    b.Property<int?>("LastEditby")
                        .HasColumnType("INTEGER")
                        .HasColumnName("R_LAST_EDITBY");

                    b.Property<string>("LastEdited")
                        .HasMaxLength(14)
                        .HasColumnType("TEXT")
                        .HasColumnName("R_LAST_EDIT");

                    b.Property<short>("Mail")
                        .HasColumnType("INTEGER")
                        .HasColumnName("R_MAIL");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("R_AUTHOR");

                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TOPIC_ID");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER")
                        .HasColumnName("R_RATING");

                    b.Property<short>("Sig")
                        .HasColumnType("INTEGER")
                        .HasColumnName("R_SIG");

                    b.Property<short>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("R_STATUS");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PostId");

                    b.ToTable("FORUM_REPLY");
                });

            modelBuilder.Entity("Snitz.PostThanks.Models.PostThanksEntry", b =>
                {
                    b.HasOne("SnitzCore.Data.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.ArchivedPost", b =>
                {
                    b.HasOne("SnitzCore.Data.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnitzCore.Data.Models.Forum", "Forum")
                        .WithMany("ArchivedPosts")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnitzCore.Data.Models.Member", "LastPostAuthor")
                        .WithMany()
                        .HasForeignKey("LastPostAuthorId");

                    b.HasOne("SnitzCore.Data.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Forum");

                    b.Navigation("LastPostAuthor");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.ArchivedReply", b =>
                {
                    b.HasOne("SnitzCore.Data.Models.ArchivedPost", "Topic")
                        .WithMany("Replies")
                        .HasForeignKey("ArchivedPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnitzCore.Data.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.Forum", b =>
                {
                    b.HasOne("SnitzCore.Data.Models.Category", "Category")
                        .WithMany("Forums")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnitzCore.Data.Models.Member", "LastPostAuthor")
                        .WithMany()
                        .HasForeignKey("LastPostAuthorId");

                    b.Navigation("Category");

                    b.Navigation("LastPostAuthor");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.ForumModerator", b =>
                {
                    b.HasOne("SnitzCore.Data.Models.Forum", null)
                        .WithMany("ForumModerators")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnitzCore.Data.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.MemberSubscription", b =>
                {
                    b.HasOne("SnitzCore.Data.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnitzCore.Data.Models.Forum", "Forum")
                        .WithMany()
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnitzCore.Data.Models.Member", "Member")
                        .WithMany("Subscriptions")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnitzCore.Data.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Forum");

                    b.Navigation("Member");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.Post", b =>
                {
                    b.HasOne("SnitzCore.Data.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnitzCore.Data.Models.Forum", "Forum")
                        .WithMany("Posts")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnitzCore.Data.Models.Member", "LastPostAuthor")
                        .WithMany()
                        .HasForeignKey("LastPostAuthorId");

                    b.HasOne("SnitzCore.Data.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Forum");

                    b.Navigation("LastPostAuthor");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.PostReply", b =>
                {
                    b.HasOne("SnitzCore.Data.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnitzCore.Data.Models.Post", "Topic")
                        .WithMany("Replies")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.ArchivedPost", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.Category", b =>
                {
                    b.Navigation("Forums");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.Forum", b =>
                {
                    b.Navigation("ArchivedPosts");

                    b.Navigation("ForumModerators");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.Member", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.Post", b =>
                {
                    b.Navigation("Replies");
                });
#pragma warning restore 612, 618
        }
    }
}
