@using Microsoft.AspNetCore.Builder
@using SnitzCore.BackOffice.ViewModels
@using System.Globalization
@model AdminCreateUserViewModel
@inject IOptions<RequestLocalizationOptions> LocOptions

<form asp-controller="Admin" asp-action="CreateUser" class="needs-validation p-2" novalidate data-ajax="true" data-ajax-update="#createuser-result">

    <div class="mb-3">
        <label asp-for="Username" class="form-label">Username</label>
        <input type="text" asp-for="Username" value="" class="form-control" />
        <div class="invalid-feedback">@Localizer["UsernameRequired"]</div>
    </div>
    <div class="mb-3">
        <label asp-for="Email" class="form-label">Email</label>
        <input type="text" asp-for="Email" value="" class="form-control" />
        <span class="invalid-feedback">@Localizer["PropertyRequired", Localizer["prompt_email_url"].Value]</span>
    </div>
    <div class="mb-3">
        <label asp-for="Password" class="form-label">Password</label>
        <div class="input-group">
            <input type="password" asp-for="Password" value="" class="form-control" />
            <button class="btn btn-outline-secondary" type="button" id="button-addon2">Button</button>
        </div>
        <div class="invalid-feedback">@Localizer["dlgPasswordMsg"]</div>
    </div>
    <div class="mb-3">
        <label asp-for="Confirm" class="form-label">Confirm Password</label>
        <input type="password" asp-for="Confirm" value="" class="form-control" />
        <div class="invalid-feedback">@Localizer["compPassword", Localizer["Password"].Value, Localizer["ConfirmPassword"].Value]</div>
    </div>

    <div class="mb-3">
        <div class="form-check mb-3">
            <input class="form-check-input" type="checkbox" asp-for="InviteEmail">
            <label class="form-check-label" asp-for="InviteEmail">
                Send Email Invite with login details.
            </label>
        </div>
        @{
            var supportedCultures = LocOptions.Value.SupportedUICultures;
            var requestCulture = CultureInfo.CurrentUICulture;
            var cultureItems = supportedCultures
            .Select(c => new SelectListItem { Value = c.Name, Text = c.DisplayName })
            .ToList();
            var returnUrl = $"{Context.Request.PathBase}{Context.Request.Path.Value}";
            string clang = requestCulture?.TwoLetterISOLanguageName ?? "";
        }
        <!-- Split dropdown button -->
        <div class="mb-3">
            <label class="form-label" asp-for="EmailLang">
                Select a language to use in the email.
            </label>
            <select class="form-select" name="EmailLang" id="EmailLang">
                <option selected>Choose language</option>
                @foreach (var culture in cultureItems)
                {
                    <option value="@culture.Value">@culture.Text</option>
                }
            </select>
        </div>
    </div>
    <div id="createuser-result" class="mb-3"></div>
    <div class="mb-3">
        <button type="button" class="btn btn-danger" data-dismiss="modal">@Localizer["btnCancel"]</button>
        <button type="submit" id="approve-user-btn" class="btn btn-success">Create</button>
    </div>
</form>

<script>
        (() => {
      'use strict'

      // Fetch all the forms we want to apply custom Bootstrap validation styles to
      const forms = document.querySelectorAll('.needs-validation')

      // Loop over them and prevent submission
      Array.from(forms).forEach(form => {
        form.addEventListener('submit', event => {
          if (!form.checkValidity()) {
            event.preventDefault()
            event.stopPropagation()
          }

          form.classList.add('was-validated')
        }, false)
      })
    })();
</script>



