@using Microsoft.Extensions.Options
@using Microsoft.AspNetCore.Builder
@using SnitzCore.BackOffice.ViewModels
@model TemplateViewModel
@inject IOptions<RequestLocalizationOptions> LocOptions
@{
    ViewBag.Title = "Template Editor";
    Layout = "_MasterLayout";
    var cultureItems = LocOptions.Value.SupportedUICultures!
        .Where(c=>c.TwoLetterISOLanguageName != "en")
        .Select(c => new SelectListItem { Value = c.TwoLetterISOLanguageName, Text = c.DisplayName })
        .ToList();

}
@section Styles{
    <link rel="stylesheet" href="~/codemirror/lib/codemirror.css">
}

<div class="mt-3">
    <h3>@ViewBag.Title</h3>
    <form class="form-inline mb-3" asp-action="SaveTemplate" asp-controller="LanguageManager">
        <div class="row">
            <label class="col-sm-1 col-form-label d-none">Theme:</label>
            <div class="col d-none">
                <select id="selectStyle" class="form-select" >
                    <option value="stackoverflow-dark.min.css" selected>Dark</option>
                    <option value="stackoverflow-light.min.css">Light</option>
                </select>
            </div>
            <label class="col-1 col-form-label">Template</label>
            <div class="col-3">
                <select id="selectTemplate" class="form-select" name="TemplateFile">
                    @foreach (var template in Model.Templates!)
                    {
                        if (Model.TemplateFile == template)
                        {
                            <option selected>@template</option>
                        }
                        else{
                            <option>@template</option>
                        }
                    }
                </select>
            </div>
            <label class="col-1 col-form-label">Language</label>
            <div class="col-3">
                <select id="selectLang" class="form-select" name="TemplateLang">
                    @if (Model.TemplateLang == "en-GB")
                    {
                        <option value="en-GB" selected>English</option>
                    }
                    else
                    {
                        <option value="en-GB">English</option>
                    }
                    @foreach (var lang in cultureItems)
                    {
                        if (Model.TemplateLang == lang.Value)
                        {
                            <option value="@lang.Value" selected>@lang.Text</option>
                        }
                        else
                        {
                            <option value="@lang.Value">@lang.Text</option>
                        }
                    }
                </select>
            </div>
            <div class="col-3">
                <button type="submit" class="btn btn-danger">Save</button>
            </div>
        </div>
        <p class="p-3 fw-bold">If the template does not exist for the selected language, the english template will be loaded.</p>

        <!-- Textarea, the code editor -->
        <textarea id="template-editor" wrap="soft" spellcheck="false" name="TemplateHtml"></textarea>

        <!-- End of the code editor -->
    </form>
    <div class="row p-3">
        <div class="col">
            Replacement Tags:<br />
            <ol>
                <li>[SERVER] - The url of the Forum</li>
                <li>[FORUM] - Title of the Forum</li>
                <li>[SUBJECT]</li>
                <li>[DATE]</li>
                <li>[USER] - Userame of the recipient</li>
                <li>[URL]</li>
                <li>[EXTRATEXT]</li>
            </ol>
        </div>
        <div class="col">
            Editor Shortcut Keys:<br />
            <ol>
                <li>[Enter]: Maintain indentation as previous line.</li>
                <li>[Tab] / [Shift]+[Tab]: Increase/decrease indentation (multiline supported)</li>
                <li>[Shift] + [Del]/[Backspace]: Delete entire row.</li>
                <li>[Home]: Move cursor to the front of first non-white space character.</li>
            </ol>
        </div>
    </div>

</div>

@section Scripts
{
    <script src="~/js/jquery.unobtrusive-ajax.min.js" type="text/javascript"></script>
    <script src="~/codemirror/lib/codemirror.js" type="text/javascript"></script>
    <script src="~/codemirror/addon/selection/selection-pointer.js" type="text/javascript"></script>
    <script src="~/codemirror/mode/xml/xml.js" type="text/javascript"></script>
    <script src="~/codemirror/mode/javascript/javascript.js" type="text/javascript"></script>
    <script src="~/codemirror/mode/css/css.js" type="text/javascript"></script>
    <script src="~/codemirror/mode/vbscript/vbscript.js" type="text/javascript"></script>
    <script src="~/codemirror/mode/htmlmixed/htmlmixed.js" type="text/javascript"></script>

    <script type="text/javascript">
        <!-- Create a simple CodeMirror instance -->
        var mixedMode = {
            name: "htmlmixed",
            scriptTypes: [{
                matches: /\/x-handlebars-template|\/x-mustache/i,
                mode: null
            },
            {
                matches: /(text|application)\/(x-)?vb(a|script)/i,
                mode: "vbscript"
            }]
        };
        var myCodeMirror = CodeMirror.fromTextArea(document.getElementById("template-editor"), {
            mode: mixedMode,
            lineNumbers: true
        });

        document.getElementById("selectTemplate").addEventListener("change", (e) => {
            var lang = document.getElementById("selectLang").value;
            setTimeout(loadTemplateHtml(e.target.value, lang), 500);

        });
        document.getElementById("selectLang").addEventListener("change", (e) => {
            var template = document.getElementById("selectTemplate").value;
            setTimeout(loadTemplateHtml(template, e.target.value), 500);

        });
        function SaveMe() {
            var textToWrite = myCodeMirror.doc.getValue();
        }
        function loadTemplateHtml(template, lang) {
            // using fetch api to load a sample html document

            fetch(SnitzVars.baseUrl + '/Templates/' + lang + '/' + template + '.html', {
                headers: {
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': '0'
                }
            })
                .then(response => {
                    // status 404 or 500 will set ok to false
                    if (response.ok) {
                        // Success: convert data received & populate textarea
                        response.text().then(html => {
                            myCodeMirror.setValue(html.trim());
                            myCodeMirror.setSize("99%", 400);
                        });
                    }
                    else {
                        //try loading the english version??
                        if (response.status == "404" && lang !== 'en-GB') {
                            setTimeout(loadTemplateHtml(template, 'en-GB'), 250);
                        } else {
                            throw new Error(response.status + " Failed Fetch ");
                        }
                    }
                })
                .catch((error) => {
                    alert(error);
                });
        }

        window.onload = function () {
            //keep the language tab active
            $("#admin-nav li a.nav-link.active").removeClass("active");
            $("#lang-settings").addClass("active");

            var template = document.getElementById("selectTemplate").value;
            var lang = document.getElementById("selectLang").value;
            // use a timer to delay the execution
            setTimeout(loadTemplateHtml(template, lang), 250);
        };
    </script>
}