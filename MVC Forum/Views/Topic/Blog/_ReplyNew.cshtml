@using BbCodeFormatter
@using Snitz.PostThanks.Helpers
@using SnitzCore.Data.Extensions
@using SnitzCore.Service.Extensions
@inject ICodeProcessor BbCodeProcessor
@inject IEnumerable<ISnitzStartupService> pluginservices

@model PostReply
@{
    var thanksservice = pluginservices.FirstOrDefault(t => t.GetType() == typeof(PostThanksService));
    if (thanksservice != null)
    {
        TempData["allowThanks"] = thanksservice.EnabledForTopic(Model.Topic.Forum.Id);
    }
    DateTime date = Model.Created.FromForumDateStr();

    var unmoderatedClass = "";
    if (Model.Topic.Status == (int)Status.UnModerated)
    {
        unmoderatedClass = "topic-unmoderated";
    }
    else if (Model.Topic.Status == (int)Status.OnHold)
    {
        unmoderatedClass = "topic-onhold";
    }
}


    <div class="col-xs-7 col-xs-offset-3 blog-container reply @unmoderatedClass" id="r_@Model.Id">
    <a href="#page-top" data-toggle="tooltip" data-title="@Localizer["tipPageTop"]" class="pull-right"><i class="fa fa-2x fa-angle-double-up"></i></a>
        <div>
        <div>
            <snitz-avatar src="~/Content/Avatar/@Model.Member.PhotoUrl" def-src="~/images/ninja-1027877_960_720.webp" class="rounded-circle" member="@Model.Member.Name" />
            <a href="~/Account/Detail/@Model.Member.Name" title="View member profile">@Model.Member.Name</a>
            <snitz-datetime datetime="@Model.Created.FromForumDateStr()"></snitz-datetime>

        </div>
        <hr />
        @await Component.InvokeAsync("PostControls", new { post = Model })
        <hr />
    </div>
        <div class="blog-message padding-md">
            @Html.Raw(BbCodeProcessor.Format(Model.Content))
        </div><br />


    </div>



