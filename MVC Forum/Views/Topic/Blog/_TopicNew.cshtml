@using BbCodeFormatter
@using MVCForum.ViewModels.Post
@using Snitz.PostThanks.Helpers
@using SnitzCore.Data.Extensions
@using SnitzCore.Service.Extensions
@inject ICodeProcessor BbCodeProcessor
@inject IEnumerable<ISnitzStartupService> pluginservices

@model Post

@{
    DateTime date = Model.Created.FromForumDateStr();
    var thanksservice = pluginservices.FirstOrDefault(t => t.GetType() == typeof(PostThanksService));
    if (thanksservice != null)
    {
        TempData["allowThanks"] = thanksservice.EnabledForTopic(Model.Forum.Id);
    }
}
<div class="blog-container clearfix">
    <div class="row-fluid">
        <h4>@BbCodeProcessor.Subject(Model.Title)</h4>
        <snitz-datetime datetime="@Model.Created.FromForumDateStr()"></snitz-datetime>
        <div>
            <a href="~/Account/Detail/@Model.Member.Name"><snitz-avatar src="~/Content/Avatar/@Model.Member.PhotoUrl" def-src="~/images/ninja-1027877_960_720.webp" class="rounded-circle" member="@Model.Member.Name" /></a>

        </div>
        @if (ViewBag.RatingSum > 0)
        {
            <input id="star-rating-demo" value="@ViewBag.RatingSum" type="number" class="rating" min=0 max=5 step=0.1 data-size="xs" />
        }
        else if (ViewBag.RatingSum < 0)
        {
            <input id="star-rating-demo" value="@ViewBag.RatingSum" type="number" class="rating" min=0 max=5 step=0.1 data-size="xs" />
        }
    </div>
    <div class="row-fluid">
        <div class="">
            <div class="blog-message">
                @Html.Raw(BbCodeProcessor.Format(Model.Content))
            </div>
        </div>
        @await Component.InvokeAsync("PostControls", new { post = Model })
    </div>
</div>

