@using System.Reflection
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using SnitzCore.Data.Extensions
@model MVCForum.ViewModels.User.UserCreateModel
@{
    var errored = Model.Password != null;
    string errstyle = errored ? "" : "display:none";
}
@if (SnitzConfig.GetIntValue("STRPROHIBITNEWMEMBERS") == 1)
{
    <div class="container pt-0">
        <div class="center">
            <h2>@Localizer["regNotEnabled"]</h2>
        </div>
    </div>
}
else
{
    @section Styles
    {
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.10.0/css/bootstrap-datepicker3.min.css">
    }
    <div snitz-if="@(!errored)" class="container pt-0">
        <div class="center">
            <div class="col-8 col-md-4">
                <div id="captchaimage-div">@await Component.InvokeAsync("Captcha")</div>
            </div>
        </div>
    </div>

    <form asp-controller="Account" asp-action="Register" method="post" class="needs-validation p-2" novalidate id="login-form" style="@errstyle">
        @Html.AntiForgeryToken()
        <div class="row pt-0">
            <div class="center m-2 ">
                <div class="subforum col-6 bg-form border border-dark rounded">
                    <h1 class="bg-dark text-bg-dark p-2">@Localizer["registerTitle"]</h1>
                    <div class="p-2">
                        <div class="mb-3">
                            <label asp-for="Name" class="form-label">@Localizer["Username"]</label>
                            <input asp-for="Name" class="form-control" required="required" />
                            <div class="invalid-feedback">@Localizer["UsernameRequired"]</div>
                        </div>
                        <div class="mb-3">
                            <label asp-for="Email" class="form-label">@Localizer["Email"]</label>
                            <input asp-for="Email" class="form-control" required="required" />
                            <div class="invalid-feedback">@Localizer["PropertyRequired", Localizer["prompt_email_url"].Value]</div>
                        </div>
                        <div class="mb-3">
                            <label asp-for="Password" class="form-label">@Localizer["Password"]</label>
                            <div class="input-group has-validation">
                                @Html.PasswordFor(m => m.Password, new { @class = "form-control", required = "required" })
                                <div class="invalid-feedback text-danger" id="pwd-invalid">@Localizer["dlgPasswordMsg"]</div>
                            </div>

                        </div>
                        <div class="mb-3">
                            <label for="pwRepeat" class="form-label">@Localizer["ConfirmPassword"]</label>
                            <div class="input-group has-validation">
                                <input type="password" name="pwRepeat" id="pwRepeat" class="form-control" required/>
                                <div class="invalid-feedback">@Localizer["compPassword", Localizer["Password"].Value, Localizer["ConfirmPassword"].Value]</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row pt-0">
            <div class="center m-2 ">
                <div class="subforum col-6 bg-form border border-dark rounded">
                    <h1 class="bg-dark text-bg-dark p-2">@Localizer["Required"]</h1>
                    <div class="p-2">
                        @if (Model.RequiredFields != null)
                        {
                            var counter = 0;
                            foreach (var field in Model.RequiredFields)
                            {
                                var fieldname = field.Replace("STRREQ", "STR");
                                var props = typeof(Member).GetProperties().Where(p => !p.SystemProperty() && p.GetPropertyDisplayCheck<Member>() == fieldname).OrderBy(p => p.PropertyOrder());
                                foreach (PropertyInfo property in props)
                                {
                                    <snitz-config name="RequiredFields[@counter]" can-edit="true" property-info="@property" property-val="" property-req="true" text-localizer-delegate="delegate(string s) { return Localizer[s].Value; }"></snitz-config>
                                    <input type="hidden" name="RequiredProperty[@counter]" value="@property.Name" />
                                    counter++;
                                }
                                
                            }
                            <span class="form-text text-danger" asp-validation-for="@Model.RequiredFields"></span>
                        }
                        <div class="mb-3">
                            <a href="~/Forums" title="Cancel user creation" class="btn btn-danger">@Localizer["btnCancel"]</a>
                            <button name="submit" type="submit" class="btn btn-primary" title="Register the user">@Localizer["Register"]</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <input type="hidden" id="val" name="val" data-val="true" data-val-custom="My custom error message" />
    </form>
    @section Scripts
    {
        <script type="text/javascript" src="~/js/jquery.unobtrusive-ajax.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.10.0/js/bootstrap-datepicker.min.js"></script>
        <script src="~/js/captcha.js" type="text/javascript" ></script>
        <script src="~/js/jquery.passwordstrength.js" type="text/javascript"></script>
    <script type="text/javascript">

            // Disable form submissions if there are invalid fields
            (function() {
                'use strict';
                window.addEventListener('load', function() {
                    // Get the forms we want to add validation styles to
                    var forms = document.getElementsByClassName('needs-validation');

                    // Loop over them and prevent submission
                    var validation = Array.prototype.filter.call(forms, function(form) {

                        form.addEventListener('submit', function(event) {
                            let errmessage = '';
                            var pw = document.getElementById('Password'); // $('#pw').val();

                            var pwdLength = /^.{8,}$/;
                            var pwdUpper = /[A-Z]+/;
                            var pwdLower = /[a-z]+/;
                            var pwdNumber = /[0-9]+/;
                            var pwdSymbol = /[!@@#$%^&*(),.?":{}|<>]+/;

                            if(!pwdLength.test(pw.value)){
                                errmessage += '<li>Be at least 8 characters in length.</li>';
                            }
                            if(!pwdUpper.test(pw.value)){
                                errmessage += '<li>Contain at least 1 uppercase letter.</li>';
                            }
                            if(!pwdLower.test(pw.value)){
                                errmessage += '<li>Contain at least 1 lowercase letter.</li>';
                            }
                            if(!pwdNumber.test(pw.value)){
                                errmessage += '<li>Contain at least 1 number (0–9).</li>';
                            }
                            // if(!pwdSymbol.test(pw.value)){
                            //     errmessage += '<li>Contain at least 1 special character (!@@#$%^&()\'[]"?+-/*).</li>';
                            // }

                            if (pwdLength.test(pw.value) && pwdUpper.test(pw.value) && pwdLower.test(pw.value) && pwdNumber.test(pw.value) && pwdSymbol.test(pw.value)) {
                                pw.setCustomValidity('');

                            }else{
                                document.getElementById('Password').classList.add("is-invalid");
                                pw.setCustomValidity('<ul>Password must' + errmessage + '</ul>');
                                document.getElementById('pwd-invalid').innerHTML = '<ul>Password must' + errmessage + '</ul>';
                                //pw.reportValidity();
                                //$('#pwd-invalid').show();
                            }
                            var pwRepeat = document.getElementById('pwRepeat');
                            if(pwRepeat.value !== pw.value) {
                                // set cell border color to red and show error icon for invalid input
                                document.getElementById('pwRepeat').classList.add("is-invalid");
                                pwRepeat.setCustomValidity('Password not valid.');
                            }
                            if($('#fecha2').length){
                                var dob = document.getElementById('fecha2');// $('#fecha2').val();
                                let [day, month, year] = dob.value.split('/')
                                var dateObj = new Date(+year, +month - 1, +day)
                                var d = new Date();
                                let curyear = d.getFullYear();
                                if (dateObj.getFullYear() > curyear - SnitzVars.minAge) {
                                    dob.setCustomValidity('You are not old enough.');
                                    document.getElementById('Dob_err').innerHTML = "You are not old enough!";
                                    $('#Dob_err').show();
                                }

                            }


                            if (form.checkValidity() === false) {
                                
                                event.preventDefault();
                                event.stopPropagation();
                            }

                            form.classList.add('was-validated');
                        }, false);
                    });
                }, false);
            })();
            var pwdOptions = {
                // The password strength you consider secure
                secureStrength: 25,
                indicatorDisplayType: "inline-block",
                indicatorClassName: "password-strength-indicator input-group-text",
                // Points for different character sets
                points: {
                    forEachCharacter: 1,
                    forEachSpace: 0,
                    containsLowercaseLetter: 2,
                    containsUppercaseLetter: 2,
                    containsNumber: 4,
                    containsSymbol: 5
                },
                strengthClassNames: [{
                    name: "very-weak",
                    text: Snitzres.pwVWeak
                    }, {
                    name: "weak",
                    text: Snitzres.pwWeak
                    }, {
                    name: "mediocre",
                    text: Snitzres.pwMedium
                    }, {
                    name: "strong",
                    text: Snitzres.pwStrong
                    }, {
                    name: "very-strong",
                    text: Snitzres.pwVStrong
                }]
            };
            $(function () {
                $('.date').datepicker({
                    autoclose: true,
                    format: {
                        /*
                         * Convert to Forum datestring format,
                         */

                        toDisplay: function (date, format, language) {
                            var d = new Date(date);
                            d.setDate(d.getDate());
                            return d.toLocaleDateString();
                        },
                        toValue: function (date, format, language) {
                            let re = /([0-9]{4})([0-9]{2})([0-9]{2})/;
                            let lastFirst = date.replace(re, '$1-$2-$3');
                            var d = new Date(lastFirst);
                            d.setDate(d.getDate());
                            return new Date(d);
                        }
                    }
                });

                revalidate();
                $("#Password").passwordStrength(pwdOptions);
                $("#pwRepeat").passwordStrength(pwdOptions);
            });
            function revalidate() {
                //var container = document.getElementById("member-profile");
                var forms = document.getElementsByTagName("form");
                var newForm = forms[forms.length - 1];
                $.validator.unobtrusive.parse(newForm);
            }
            // Add the following code if you want the name of the file appear on select
            $(".custom-file-input").on("change", function () {
                var fileName = $(this).val().split("\\").pop();
                $(this).siblings(".custom-file-label").addClass("selected").html(fileName);
            });

            //$('#one').replaceWith("<label>" + $('#one').val() + "</label>");
        </script>
    }
}



