@using MVCForum.View_Components
@model SidebarViewModel
@{

}
<div class="d-none d-lg-block @Model.Width widget-sidebar">

    @if (SnitzConfig.IsEnabled("INTSIDEBANNER"))
    {
        @await Component.InvokeAsync("AdRotator", new { template = "side" })
    }
    <partial name="QuickSearch" snitz-if="@(Model.Options?.Contains("search"))" />
    <partial name="FeaturedPoll" snitz-if="@(Model.Options?.Contains("poll"))" />
    @if (Model.Options!.Contains("latest"))
    {
        <partial name="LatestPosts" model="@Model.LatestPosts" />
    }
    @if (SnitzConfig.IsEnabled("INTFEATUREDPHOTO") && Model.Options!.Contains("image"))
    {
        <div id="featured-img-card">
        @await Component.InvokeAsync("ImageAlbum", new { template = "Featured", info = false })
        </div>
    }

    @if (SnitzConfig.IsEnabled("INTCALEVENTS") && SnitzConfig.IsEnabled("INTCALUPCOMINGEVENTS")
        && Model.Options!.Contains("events"))
    {
        if ((!SnitzConfig.IsEnabled("INTCALPUBLIC") && User.Identity.IsAuthenticated) || SnitzConfig.IsEnabled("INTCALPUBLIC"))
        {
            @await Component.InvokeAsync("Events", new { template = "UpcomingEvents" })
        }
    }
    @if (Model.Options!.Contains("blog"))
    {
        @await Component.InvokeAsync("Blog", new { template = "TagCloud", id = Model.ForumId })
        @await Component.InvokeAsync("Blog", new { template = "List", id = Model.ForumId })
    }
    @if (Model.Options!.Contains("members"))
    {
        @await Component.InvokeAsync("Members", new { max = 10 })
    }
    @if (Model.Options!.Contains("catlist"))
    {
        @await Component.InvokeAsync("Members", new { template = "CategoryForumList" })
    }
</div>

<script>
    function refreshViewComponent() {
        if(document.getElementById('featured-img-card')){
            fetch(SnitzVars.baseUrl + '/Home/RefreshFeature') // Replace with your ViewComponent's route
                .then(response => response.text())
                .then(html => {
                    document.getElementById('featured-img-card').innerHTML = html;
                })
                .catch(error => console.error('Error refreshing ViewComponent:', error));
        }
    }
    // Refresh every 30 seconds (30000 ms)
    setInterval(refreshViewComponent, 30000);
</script>