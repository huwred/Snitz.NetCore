// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SnitzCore.Data;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(SnitzDbContext))]
    [Migration("20240207143031_PhotoAlbum")]
    partial class PhotoAlbum
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "0D1F96F3-A8BD-4348-AFA4-61B931BB3553",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "467DF002-6D82-4109-979A-76F01FA9D4CF",
                            Name = "ForumMember",
                            NormalizedName = "FORUMMEMBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Snitz.PhotoAlbum.Models.AlbumCategory", b =>
                {
                    b.Property<int>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CAT_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CatId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CAT_DESC");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MEMBER_ID");

                    b.HasKey("CatId");

                    b.ToTable("FORUM_IMAGE_CAT");
                });

            modelBuilder.Entity("Snitz.PhotoAlbum.Models.AlbumGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("O_GROUP_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("O_GROUP_NAME");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("O_GROUP_ORDER");

                    b.HasKey("Id");

                    b.ToTable("FORUM_ORG_GROUP");
                });

            modelBuilder.Entity("Snitz.PhotoAlbum.Models.AlbumImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("I_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("I_CAT");

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("I_NORWEGIANNAME");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("I_DESC");

                    b.Property<bool>("DoNotFeature")
                        .HasColumnType("bit")
                        .HasColumnName("I_NOTFEATURED");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("I_GROUP_ID");

                    b.Property<int>("Height")
                        .HasColumnType("int")
                        .HasColumnName("I_HEIGHT");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit")
                        .HasColumnName("I_PRIVATE");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("I_LOC");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("I_MID");

                    b.Property<string>("Mime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("I_TYPE");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("I_SCIENTIFICNAME");

                    b.Property<int>("Size")
                        .HasColumnType("int")
                        .HasColumnName("I_SIZE");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("I_DATE");

                    b.Property<int>("Views")
                        .HasColumnType("int")
                        .HasColumnName("I_VIEWS");

                    b.Property<int>("Width")
                        .HasColumnType("int")
                        .HasColumnName("I_WIDTH");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GroupId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MemberId");

                    b.ToTable("FORUM_IMAGES");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.ArchivedReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("REPLY_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CAT_ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("R_MESSAGE");

                    b.Property<string>("Created")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("R_DATE");

                    b.Property<int>("ForumId")
                        .HasColumnType("int")
                        .HasColumnName("FORUM_ID");

                    b.Property<string>("Ip")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("R_IP");

                    b.Property<int?>("LastEditby")
                        .HasColumnType("int")
                        .HasColumnName("R_LAST_EDITBY");

                    b.Property<string>("LastEdited")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("R_LAST_EDIT");

                    b.Property<short>("Mail")
                        .HasColumnType("smallint")
                        .HasColumnName("R_MAIL");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("R_AUTHOR");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("TOPIC_ID");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("R_RATING");

                    b.Property<short>("Sig")
                        .HasColumnType("smallint")
                        .HasColumnName("R_SIG");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("R_STATUS");

                    b.HasKey("Id");

                    b.ToTable("FORUM_A_REPLY");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.ArchivedTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TOPIC_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AllowRating")
                        .HasColumnType("int")
                        .HasColumnName("T_ALLOW_RATING");

                    b.Property<int?>("ArchiveFlag")
                        .HasColumnType("int")
                        .HasColumnName("T_ARCHIVE_FLAG");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CAT_ID");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("T_DATE");

                    b.Property<int>("ForumId")
                        .HasColumnType("int")
                        .HasColumnName("FORUM_ID");

                    b.Property<string>("Ip")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("T_IP");

                    b.Property<short>("IsSticky")
                        .HasColumnType("smallint")
                        .HasColumnName("T_STICKY");

                    b.Property<short>("Ispoll")
                        .HasColumnType("smallint")
                        .HasColumnName("T_ISPOLL");

                    b.Property<string>("LastEdit")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("T_LAST_EDIT");

                    b.Property<int?>("LastEditby")
                        .HasColumnType("int")
                        .HasColumnName("T_LAST_EDITBY");

                    b.Property<string>("LastPost")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("T_LAST_POST");

                    b.Property<int?>("LastPostAuthorId")
                        .HasColumnType("int")
                        .HasColumnName("T_LAST_POST_AUTHOR");

                    b.Property<int?>("LastPostReplyId")
                        .HasColumnType("int")
                        .HasColumnName("T_LAST_POST_REPLY_ID");

                    b.Property<int?>("LastPoster")
                        .HasColumnType("int");

                    b.Property<short>("Mail")
                        .HasColumnType("smallint")
                        .HasColumnName("T_MAIL");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("T_AUTHOR");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("T_MESSAGE");

                    b.Property<short>("Pollstatus")
                        .HasColumnType("smallint")
                        .HasColumnName("T_POLLSTATUS");

                    b.Property<int>("RatingTotal")
                        .HasColumnType("int")
                        .HasColumnName("T_RATING_TOTAL");

                    b.Property<int>("RatingTotalCount")
                        .HasColumnType("int")
                        .HasColumnName("T_RATING_TOTAL_COUNT");

                    b.Property<int>("ReplyCount")
                        .HasColumnType("int")
                        .HasColumnName("T_REPLIES");

                    b.Property<short>("Sig")
                        .HasColumnType("smallint")
                        .HasColumnName("T_SIG");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("T_STATUS");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("T_SUBJECT");

                    b.Property<int>("UnmoderatedReplies")
                        .HasColumnType("int")
                        .HasColumnName("T_UREPLIES");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int")
                        .HasColumnName("T_VIEW_COUNT");

                    b.HasKey("Id");

                    b.ToTable("FORUM_A_TOPICS");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.Badword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("B_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ReplaceWith")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("B_REPLACE");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("B_BADWORD");

                    b.HasKey("Id");

                    b.ToTable("FORUM_BADWORDS");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.BookmarkEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BOOKMARK_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("B_MEMBERID");

                    b.Property<int>("TopicId")
                        .HasColumnType("int")
                        .HasColumnName("B_TOPICID");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("TopicId");

                    b.ToTable("FORUM_BOOKMARKS");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CAT_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Moderation")
                        .HasColumnType("int")
                        .HasColumnName("CAT_MODERATION");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CAT_NAME");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasColumnName("CAT_ORDER");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("CAT_STATUS");

                    b.Property<int?>("Subscription")
                        .HasColumnType("int")
                        .HasColumnName("CAT_SUBSCRIPTION");

                    b.HasKey("Id");

                    b.ToTable("FORUM_CATEGORY");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Moderation = 0,
                            Name = "General",
                            Sort = 0,
                            Status = (short)1
                        });
                });

            modelBuilder.Entity("SnitzCore.Data.Models.Forum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FORUM_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArchiveSched")
                        .HasColumnType("int")
                        .HasColumnName("F_ARCHIVE_SCHED");

                    b.Property<int>("ArchivedCount")
                        .HasColumnType("int")
                        .HasColumnName("F_A_COUNT");

                    b.Property<int>("ArchivedTopics")
                        .HasColumnType("int")
                        .HasColumnName("F_A_TOPICS");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CAT_ID");

                    b.Property<short>("CountMemberPosts")
                        .HasColumnType("smallint")
                        .HasColumnName("F_COUNT_M_POSTS");

                    b.Property<int>("Defaultdays")
                        .HasColumnType("int")
                        .HasColumnName("F_DEFAULTDAYS");

                    b.Property<int>("DeleteSched")
                        .HasColumnType("int")
                        .HasColumnName("F_DELETE_SCHED");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("F_DESCRIPTION");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("F_IP");

                    b.Property<string>("LastArchived")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("F_L_ARCHIVE");

                    b.Property<string>("LastDelete")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("F_L_DELETE");

                    b.Property<string>("LastPost")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("F_LAST_POST");

                    b.Property<int?>("LastPostAuthorId")
                        .HasColumnType("int")
                        .HasColumnName("F_LAST_POST_AUTHOR");

                    b.Property<int?>("LatestReplyId")
                        .HasColumnType("int")
                        .HasColumnName("F_LAST_POST_REPLY_ID");

                    b.Property<int?>("LatestTopicId")
                        .HasColumnType("int")
                        .HasColumnName("F_LAST_POST_TOPIC_ID");

                    b.Property<short>("Mail")
                        .HasColumnType("smallint")
                        .HasColumnName("F_MAIL");

                    b.Property<int>("Moderation")
                        .HasColumnType("int")
                        .HasColumnName("F_MODERATION");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasColumnName("F_ORDER");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("F_PASSWORD_NEW");

                    b.Property<int>("Polls")
                        .HasColumnType("int")
                        .HasColumnName("F_POLLS");

                    b.Property<int>("Postauth")
                        .HasColumnType("int")
                        .HasColumnName("F_POSTAUTH");

                    b.Property<int>("Privateforums")
                        .HasColumnType("int")
                        .HasColumnName("F_PRIVATEFORUMS");

                    b.Property<short>("Rating")
                        .HasColumnType("smallint")
                        .HasColumnName("F_RATING");

                    b.Property<int>("ReplyCount")
                        .HasColumnType("int")
                        .HasColumnName("F_COUNT");

                    b.Property<int>("Replyauth")
                        .HasColumnType("int")
                        .HasColumnName("F_REPLYAUTH");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("F_STATUS");

                    b.Property<int>("Subscription")
                        .HasColumnType("int")
                        .HasColumnName("F_SUBSCRIPTION");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("F_SUBJECT");

                    b.Property<int>("TopicCount")
                        .HasColumnType("int")
                        .HasColumnName("F_TOPICS");

                    b.Property<short>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("F_TYPE");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("F_URL");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("FORUM_FORUM");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArchiveSched = 0,
                            ArchivedCount = 0,
                            ArchivedTopics = 0,
                            CategoryId = 1,
                            CountMemberPosts = (short)1,
                            Defaultdays = 30,
                            DeleteSched = 0,
                            Description = "This forum gives you a chance to become more familiar with how this product responds to different features and keeps testing in one place instead of posting tests all over. Happy Posting! [:)]",
                            Mail = (short)0,
                            Moderation = 0,
                            Order = 0,
                            Polls = 0,
                            Postauth = 0,
                            Privateforums = 0,
                            Rating = (short)0,
                            ReplyCount = 0,
                            Replyauth = 0,
                            Status = (short)1,
                            Subscription = 0,
                            Title = "Testing Forums",
                            TopicCount = 0,
                            Type = (short)0
                        });
                });

            modelBuilder.Entity("SnitzCore.Data.Models.ForumAllowedMember", b =>
                {
                    b.Property<int>("ForumId")
                        .HasColumnType("int")
                        .HasColumnName("FORUM_ID");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MEMBER_ID");

                    b.HasIndex("ForumId");

                    b.ToTable("FORUM_ALLOWED_MEMBERS");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.ForumModerator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MOD_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ForumId")
                        .HasColumnType("int")
                        .HasColumnName("FORUM_ID");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MEMBER_ID");

                    b.Property<short?>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("MOD_TYPE");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.HasIndex("MemberId");

                    b.ToTable("FORUM_MODERATOR");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.ForumTotal", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("COUNT_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<int>("ArchivedPostCount")
                        .HasColumnType("int")
                        .HasColumnName("P_A_COUNT");

                    b.Property<int>("ArchivedTopicCount")
                        .HasColumnType("int")
                        .HasColumnName("T_A_COUNT");

                    b.Property<int>("PostCount")
                        .HasColumnType("int")
                        .HasColumnName("P_COUNT");

                    b.Property<int>("TopicCount")
                        .HasColumnType("int")
                        .HasColumnName("T_COUNT");

                    b.Property<int>("UserCount")
                        .HasColumnType("int")
                        .HasColumnName("U_COUNT");

                    b.HasKey("Id");

                    b.ToTable("FORUM_TOTALS");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GROUP_KEY");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("GROUP_CATID");

                    b.Property<int?>("GroupNameId")
                        .HasColumnType("int")
                        .HasColumnName("GROUP_ID");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GroupNameId");

                    b.ToTable("FORUM_GROUPS");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.GroupName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GROUP_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("GROUP_DESCRIPTION");

                    b.Property<string>("Icon")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("GROUP_ICON");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("GROUP_IMAGE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GROUP_NAME");

                    b.HasKey("Id");

                    b.ToTable("FORUM_GROUP_NAMES");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.LanguageResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ResourceId");

                    b.Property<string>("ResourceSet")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Type")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LANGUAGE_RES");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MEMBER_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Age")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("M_AGE");

                    b.Property<string>("Aim")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("M_AIM");

                    b.Property<short>("Allowemail")
                        .HasColumnType("smallint")
                        .HasColumnName("M_ALLOWEMAIL");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("M_BIO");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("M_CITY");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("M_COUNTRY");

                    b.Property<string>("Created")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("M_DATE");

                    b.Property<int>("DefaultView")
                        .HasColumnType("int")
                        .HasColumnName("M_DEFAULT_VIEW");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dob")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasColumnName("M_DOB");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("M_EMAIL");

                    b.Property<string>("Firstname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("M_FIRSTNAME");

                    b.Property<short>("HideEmail")
                        .HasColumnType("smallint")
                        .HasColumnName("M_HIDE_EMAIL");

                    b.Property<string>("Hobbies")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("M_HOBBIES");

                    b.Property<string>("Homepage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("M_HOMEPAGE");

                    b.Property<string>("Icq")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("M_ICQ");

                    b.Property<string>("Ip")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("M_IP");

                    b.Property<string>("Key")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("M_KEY");

                    b.Property<string>("LastIp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("M_LAST_IP");

                    b.Property<string>("Lastactivity")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("M_LASTACTIVITY");

                    b.Property<string>("Lastheredate")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("M_LASTHEREDATE");

                    b.Property<string>("Lastname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("M_LASTNAME");

                    b.Property<string>("Lastpostdate")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("M_LASTPOSTDATE");

                    b.Property<short>("Level")
                        .HasColumnType("smallint")
                        .HasColumnName("M_LEVEL");

                    b.Property<string>("Link1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("M_LINK1");

                    b.Property<string>("Link2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("M_LINK2");

                    b.Property<string>("Lnews")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("M_LNEWS");

                    b.Property<string>("Marstatus")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("M_MARSTATUS");

                    b.Property<string>("Msn")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("M_MSN");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("M_NAME");

                    b.Property<string>("Newemail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("M_NEWEMAIL");

                    b.Property<string>("Occupation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("M_OCCUPATION");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("M_PHOTO_URL");

                    b.Property<int>("Pmemail")
                        .HasColumnType("int")
                        .HasColumnName("M_PMEMAIL");

                    b.Property<int>("Pmreceive")
                        .HasColumnType("int")
                        .HasColumnName("M_PMRECEIVE");

                    b.Property<short>("Pmsavesent")
                        .HasColumnType("smallint")
                        .HasColumnName("M_PMSAVESENT");

                    b.Property<int>("Posts")
                        .HasColumnType("int")
                        .HasColumnName("M_POSTS");

                    b.Property<short>("Privateprofile")
                        .HasColumnType("smallint")
                        .HasColumnName("M_PRIVATEPROFILE");

                    b.Property<string>("Pwkey")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("M_PWKEY");

                    b.Property<string>("Quote")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("M_QUOTE");

                    b.Property<short>("ReceiveEmail")
                        .HasColumnType("smallint")
                        .HasColumnName("M_RECEIVE_EMAIL");

                    b.Property<string>("Sex")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("M_SEX");

                    b.Property<short>("Sha256")
                        .HasColumnType("smallint")
                        .HasColumnName("M_SHA256");

                    b.Property<short>("SigDefault")
                        .HasColumnType("smallint")
                        .HasColumnName("M_SIG_DEFAULT");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("M_SIG");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("M_STATE");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("M_STATUS");

                    b.Property<short>("Subscription")
                        .HasColumnType("smallint")
                        .HasColumnName("M_SUBSCRIPTION");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("M_TITLE");

                    b.Property<short>("ViewSig")
                        .HasColumnType("smallint")
                        .HasColumnName("M_VIEW_SIG");

                    b.Property<string>("Yahoo")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("M_YAHOO");

                    b.HasKey("Id");

                    b.ToTable("FORUM_MEMBERS");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Member");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Allowemail = (short)0,
                            Created = "20240207143030",
                            DefaultView = 0,
                            Email = "xxxx@example.com",
                            HideEmail = (short)0,
                            Level = (short)3,
                            Name = "Administrator",
                            Pmemail = 0,
                            Pmreceive = 0,
                            Pmsavesent = (short)0,
                            Posts = 0,
                            Privateprofile = (short)0,
                            ReceiveEmail = (short)0,
                            Sha256 = (short)0,
                            SigDefault = (short)0,
                            Status = (short)1,
                            Subscription = (short)0,
                            ViewSig = (short)0
                        });
                });

            modelBuilder.Entity("SnitzCore.Data.Models.MemberNamefilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("N_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("N_NAME");

                    b.HasKey("Id");

                    b.ToTable("FORUM_NAMEFILTER");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("SnitzCore.Data.Models.MemberRanking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RANK_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("R_IMAGE");

                    b.Property<int>("ImgRepeat")
                        .HasColumnType("int")
                        .HasColumnName("R_IMG_REPEAT");

                    b.Property<int?>("Posts")
                        .HasColumnType("int")
                        .HasColumnName("R_POSTS");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("R_TITLE");

                    b.HasKey("Id");

                    b.ToTable("FORUM_RANKING");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.MemberSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SUBSCRIPTION_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CAT_ID");

                    b.Property<int>("ForumId")
                        .HasColumnType("int")
                        .HasColumnName("FORUM_ID");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MEMBER_ID");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("TOPIC_ID");

                    b.HasKey("Id");

                    b.ToTable("FORUM_SUBSCRIPTIONS");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.OldMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("Password");

                    b.HasKey("Id");

                    b.ToTable("webpages_Membership");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TOPIC_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AllowRating")
                        .HasColumnType("int")
                        .HasColumnName("T_ALLOW_RATING");

                    b.Property<int?>("ArchiveFlag")
                        .HasColumnType("int")
                        .HasColumnName("T_ARCHIVE_FLAG");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CAT_ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("T_MESSAGE");

                    b.Property<string>("Created")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("T_DATE");

                    b.Property<int>("ForumId")
                        .HasColumnType("int")
                        .HasColumnName("FORUM_ID");

                    b.Property<string>("Ip")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("T_IP");

                    b.Property<short>("IsSticky")
                        .HasColumnType("smallint")
                        .HasColumnName("T_STICKY");

                    b.Property<short>("Ispoll")
                        .HasColumnType("smallint")
                        .HasColumnName("T_ISPOLL");

                    b.Property<string>("LastEdit")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("T_LAST_EDIT");

                    b.Property<int?>("LastEditby")
                        .HasColumnType("int")
                        .HasColumnName("T_LAST_EDITBY");

                    b.Property<int?>("LastPostAuthorId")
                        .HasColumnType("int")
                        .HasColumnName("T_LAST_POST_AUTHOR");

                    b.Property<string>("LastPostDate")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("T_LAST_POST");

                    b.Property<int?>("LastPostReplyId")
                        .HasColumnType("int")
                        .HasColumnName("T_LAST_POST_REPLY_ID");

                    b.Property<int?>("LastPoster")
                        .HasColumnType("int");

                    b.Property<short>("Mail")
                        .HasColumnType("smallint")
                        .HasColumnName("T_MAIL");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("T_AUTHOR");

                    b.Property<short>("Pollstatus")
                        .HasColumnType("smallint")
                        .HasColumnName("T_POLLSTATUS");

                    b.Property<int>("RatingTotal")
                        .HasColumnType("int")
                        .HasColumnName("T_RATING_TOTAL");

                    b.Property<int>("RatingTotalCount")
                        .HasColumnType("int")
                        .HasColumnName("T_RATING_TOTAL_COUNT");

                    b.Property<int>("ReplyCount")
                        .HasColumnType("int")
                        .HasColumnName("T_REPLIES");

                    b.Property<short>("Sig")
                        .HasColumnType("smallint")
                        .HasColumnName("T_SIG");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("T_STATUS");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("T_SUBJECT");

                    b.Property<int>("UnmoderatedReplies")
                        .HasColumnType("int")
                        .HasColumnName("T_UREPLIES");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int")
                        .HasColumnName("T_VIEW_COUNT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ForumId");

                    b.HasIndex("LastPostAuthorId");

                    b.HasIndex("MemberId");

                    b.ToTable("FORUM_TOPICS");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.PostReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("REPLY_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CAT_ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("R_MESSAGE");

                    b.Property<string>("Created")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("R_DATE");

                    b.Property<int>("ForumId")
                        .HasColumnType("int")
                        .HasColumnName("FORUM_ID");

                    b.Property<string>("Ip")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("R_IP");

                    b.Property<int?>("LastEditby")
                        .HasColumnType("int")
                        .HasColumnName("R_LAST_EDITBY");

                    b.Property<string>("LastEdited")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("R_LAST_EDIT");

                    b.Property<short>("Mail")
                        .HasColumnType("smallint")
                        .HasColumnName("R_MAIL");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("R_AUTHOR");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("TOPIC_ID");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("R_RATING");

                    b.Property<short>("Sig")
                        .HasColumnType("smallint")
                        .HasColumnName("R_SIG");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("R_STATUS");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PostId");

                    b.ToTable("FORUM_REPLY");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.PrivateMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("M_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("From")
                        .HasColumnType("int")
                        .HasColumnName("M_FROM");

                    b.Property<int>("HideFrom")
                        .HasColumnType("int")
                        .HasColumnName("PM_DEL_FROM");

                    b.Property<int>("HideTo")
                        .HasColumnType("int")
                        .HasColumnName("PM_DEL_TO");

                    b.Property<string>("Mail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("M_MAIL");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("M_MESSAGE");

                    b.Property<string>("Pmcount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("M_PMCOUNT");

                    b.Property<int>("Read")
                        .HasColumnType("int")
                        .HasColumnName("M_READ");

                    b.Property<short>("SaveSentMessage")
                        .HasColumnType("smallint")
                        .HasColumnName("M_OUTBOX");

                    b.Property<string>("SentDate")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("M_SENT");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("M_SUBJECT");

                    b.Property<int>("To")
                        .HasColumnType("int")
                        .HasColumnName("M_TO");

                    b.HasKey("Id");

                    b.ToTable("FORUM_PM");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.PrivateMessageBlocklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BL_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlockedId")
                        .HasColumnType("int")
                        .HasColumnName("BL_BLOCKED_ID");

                    b.Property<string>("BlockedName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("BL_BLOCKEDNAME");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("BL_MEMBER_ID");

                    b.HasKey("Id");

                    b.ToTable("FORUM_PM_BLOCKLIST");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.SnitzConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("C_VARIABLE");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("C_VALUE");

                    b.HasKey("Id");

                    b.ToTable("FORUM_CONFIG_NEW");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Key = "STRICONS",
                            Value = "1"
                        },
                        new
                        {
                            Id = 2,
                            Key = "STRALLOWFORUMCODE",
                            Value = "1"
                        },
                        new
                        {
                            Id = 3,
                            Key = "STRPHOTOALBUM",
                            Value = "1"
                        },
                        new
                        {
                            Id = 4,
                            Key = "STRBADWORDFILTER",
                            Value = "1"
                        },
                        new
                        {
                            Id = 5,
                            Key = "STRIMGINPOSTS",
                            Value = "1"
                        },
                        new
                        {
                            Id = 6,
                            Key = "INTHOTTOPICNUM",
                            Value = "25"
                        },
                        new
                        {
                            Id = 7,
                            Key = "STRPAGESIZE",
                            Value = "15"
                        },
                        new
                        {
                            Id = 8,
                            Key = "STRPAGENUMBERSIZE",
                            Value = "10"
                        },
                        new
                        {
                            Id = 9,
                            Key = "STRMARSTATUS",
                            Value = "1"
                        },
                        new
                        {
                            Id = 10,
                            Key = "STRFULLNAME",
                            Value = "1"
                        },
                        new
                        {
                            Id = 11,
                            Key = "STRPICTURE",
                            Value = "1"
                        },
                        new
                        {
                            Id = 12,
                            Key = "STRSEX",
                            Value = "1"
                        },
                        new
                        {
                            Id = 13,
                            Key = "STRCITY",
                            Value = "1"
                        },
                        new
                        {
                            Id = 14,
                            Key = "STRSTATE",
                            Value = "1"
                        },
                        new
                        {
                            Id = 15,
                            Key = "STRAGE",
                            Value = "0"
                        },
                        new
                        {
                            Id = 16,
                            Key = "STRAGEDOB",
                            Value = "1"
                        },
                        new
                        {
                            Id = 17,
                            Key = "STRMINAGE",
                            Value = "14"
                        },
                        new
                        {
                            Id = 18,
                            Key = "STRCOUNTRY",
                            Value = "1"
                        },
                        new
                        {
                            Id = 19,
                            Key = "STROCCUPATION",
                            Value = "1"
                        },
                        new
                        {
                            Id = 20,
                            Key = "STRFAVLINKS",
                            Value = "1"
                        },
                        new
                        {
                            Id = 21,
                            Key = "STRBIO",
                            Value = "1"
                        },
                        new
                        {
                            Id = 22,
                            Key = "STRHOBBIES",
                            Value = "1"
                        },
                        new
                        {
                            Id = 23,
                            Key = "STRLNEWS",
                            Value = "1"
                        },
                        new
                        {
                            Id = 24,
                            Key = "STRQUOTE",
                            Value = "1"
                        },
                        new
                        {
                            Id = 25,
                            Key = "STRHOMEPAGE",
                            Value = "1"
                        });
                });

            modelBuilder.Entity("SnitzCore.Data.Models.SpamFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SPAM_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("SPAM_SERVER");

                    b.HasKey("Id");

                    b.ToTable("FORUM_SPAM_MAIL");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.TopicRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RATING");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RatingsBymemberId")
                        .HasColumnType("int")
                        .HasColumnName("RATINGS_BYMEMBERID");

                    b.Property<int>("RatingsTopicId")
                        .HasColumnType("int")
                        .HasColumnName("RATINGS_TOPIC_ID");

                    b.HasKey("Id");

                    b.ToTable("TOPIC_RATINGS");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.ForumUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MemberSince")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("MemberId");

                    b.HasDiscriminator().HasValue("ForumUser");

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8148cbd-aca1-49e4-9d31-ee9208df04a4",
                            Email = "xxxx@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "XXXX@EXAMPLE.COM",
                            NormalizedUserName = "ADMINISTRATOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEMbK4L6CufMdt08mJC/XixSDngF9Fma698xEx2EXKraCb5mfTGijZURx1Pi0llkwng==",
                            PhoneNumber = "+111111111111",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "bb8f3c76-8229-4a78-9f67-c00bcb081ee1",
                            TwoFactorEnabled = false,
                            UserName = "Adminstrator",
                            IsActive = false,
                            IsAdmin = true,
                            MemberId = 1,
                            MemberSince = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 0
                        });
                });

            modelBuilder.Entity("Snitz.PhotoAlbum.Models.ExtendedMember", b =>
                {
                    b.HasBaseType("SnitzCore.Data.Models.Member");

                    b.ToTable("FORUM_MEMBERS");

                    b.HasDiscriminator().HasValue("ExtendedMember");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Snitz.PhotoAlbum.Models.AlbumImage", b =>
                {
                    b.HasOne("Snitz.PhotoAlbum.Models.AlbumCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snitz.PhotoAlbum.Models.AlbumGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Snitz.PhotoAlbum.Models.ExtendedMember", "Member")
                        .WithMany("Images")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Group");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.BookmarkEntry", b =>
                {
                    b.HasOne("SnitzCore.Data.Models.Member", "Author")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnitzCore.Data.Models.Post", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.Forum", b =>
                {
                    b.HasOne("SnitzCore.Data.Models.Category", "Category")
                        .WithMany("Forums")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.ForumAllowedMember", b =>
                {
                    b.HasOne("SnitzCore.Data.Models.Forum", "Forum")
                        .WithMany()
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Forum");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.ForumModerator", b =>
                {
                    b.HasOne("SnitzCore.Data.Models.Forum", null)
                        .WithMany("ForumModerators")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnitzCore.Data.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.Group", b =>
                {
                    b.HasOne("SnitzCore.Data.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnitzCore.Data.Models.GroupName", "GroupName")
                        .WithMany()
                        .HasForeignKey("GroupNameId");

                    b.Navigation("Category");

                    b.Navigation("GroupName");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.Post", b =>
                {
                    b.HasOne("SnitzCore.Data.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnitzCore.Data.Models.Forum", "Forum")
                        .WithMany("Posts")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnitzCore.Data.Models.Member", "LastPostAuthor")
                        .WithMany()
                        .HasForeignKey("LastPostAuthorId");

                    b.HasOne("SnitzCore.Data.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Forum");

                    b.Navigation("LastPostAuthor");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.PostReply", b =>
                {
                    b.HasOne("SnitzCore.Data.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnitzCore.Data.Models.Post", "Topic")
                        .WithMany("Replies")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.ForumUser", b =>
                {
                    b.HasOne("SnitzCore.Data.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.Category", b =>
                {
                    b.Navigation("Forums");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.Forum", b =>
                {
                    b.Navigation("ForumModerators");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("SnitzCore.Data.Models.Post", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Snitz.PhotoAlbum.Models.ExtendedMember", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
